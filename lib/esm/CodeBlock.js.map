{"version":3,"sources":["../../src/CodeBlock.js"],"names":["React","classnames","SyntaxHighlighter","styles","CodeBlock","props","e","callback","setState","codeStr","target","value","state","nextProps","code","className","editer","language","style","showLineNumbers","cls","codeStyle","defaultStyle","lineNumberStyle","paddingLeft","textareaStyle","Object","assign","hljs","key","obj","fontWeight","onChange","fontWight","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAO,KAAKC,MAAZ,MAAwB,+CAAxB;AACA;;IACMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,+DAYR,UAACC,CAAD,EAAO;AAAA,UACRC,QADQ,GACK,MAAKF,KADV,CACRE,QADQ;;AAEhB,YAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAEH,CAAC,CAACI,MAAF,CAASC;AADN,OAAd,EAEG;AAAA,eAAMJ,QAAQ,CAAC,MAAKK,KAAL,CAAWH,OAAZ,CAAd;AAAA,OAFH;AAGD,KAjBkB;;AAEjB,UAAKG,KAAL,GAAa;AACXH,MAAAA,OAAO,EAAG;AADC,KAAb;AAFiB;AAKlB;;;;8CACyBI,S,EAAW;AAAA,UAC3BC,IAD2B,GAClB,KAAKT,KADa,CAC3BS,IAD2B;;AAEnC,UAAIA,IAAI,KAAKD,SAAS,CAACC,IAAvB,EAA6B;AAC3B,aAAKN,QAAL,CAAc;AAAEM,UAAAA,IAAI,EAAED,SAAS,CAACC;AAAlB,SAAd;AACD;AACF;;;6BAQQ;AAAA;;AAAA,UACCL,OADD,GACa,KAAKG,KADlB,CACCH,OADD;AAAA,wBAE8E,KAAKJ,KAFnF;AAAA,UAECS,IAFD,eAECA,IAFD;AAAA,UAEOC,SAFP,eAEOA,SAFP;AAAA,UAEkBC,MAFlB,eAEkBA,MAFlB;AAAA,6CAE0BC,QAF1B;AAAA,UAE0BA,QAF1B,qCAEmC,KAFnC;AAAA,0CAE0CC,KAF1C;AAAA,UAE0CA,KAF1C,kCAEgD,EAFhD;AAAA,8CAEoDC,eAFpD;AAAA,UAEoDA,eAFpD,sCAEoE,KAFpE;AAGP,UAAMC,GAAG,GAAGnB,UAAU,CAAC,YAAD,EAAec,SAAf,CAAtB;AACA,UAAMM,SAAS,GAAGlB,MAAM,CAACe,KAAD,CAAN,IAAiBf,MAAM,CAACmB,YAA1C,CAJO,CAIiD;;AACxD,UAAMC,eAAe,GAAGJ,eAAe,GAAG;AAAEK,QAAAA,WAAW,EAAE;AAAf,OAAH,GAAyB,EAAhE;AACA,UAAMC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,SAAS,CAACO,IAA5B,EAAkCL,eAAlC,CAAtB;AACA,UAAMZ,KAAK,GAAGF,OAAO,IAAIK,IAAzB;;AACA,WAAK,IAAIe,GAAT,IAAgBR,SAAhB,EAA2B;AACzB,YAAMS,GAAG,GAAGT,SAAS,CAACQ,GAAD,CAArB;;AACA,YAAIC,GAAG,CAACC,UAAJ,KAAmB,MAAvB,EAA+B;AAC7BD,UAAAA,GAAG,CAACC,UAAJ,GAAiB,GAAjB;AACD;AACF;;AACD,aACE;AAAK,QAAA,SAAS,EAAEX;AAAhB,SAEIJ,MAAM,IAAI;AACR,QAAA,KAAK,EAAEL,KADC;AAER,QAAA,SAAS,EAAC,WAFF;AAGR,QAAA,KAAK,EAAEc,aAHC;AAIR,QAAA,QAAQ,EAAE,kBAAAnB,CAAC;AAAA,iBAAI,MAAI,CAAC0B,QAAL,CAAc1B,CAAd,CAAJ;AAAA;AAJH,QAFd,EASE,oBAAC,iBAAD;AACE,QAAA,QAAQ,EAAEW,QADZ;AAEE,QAAA,KAAK,EAAEI,SAFT;AAGE,QAAA,WAAW,EAAE;AAACY,UAAAA,SAAS,EAAE;AAAZ,SAHf;AAIE,QAAA,eAAe,EAAEd;AAJnB,SAMGR,KANH,CATF,CADF;AAoBD;;;;EAtDqBX,KAAK,CAACkC,S;;AAuD7B;AAED,eAAe9B,SAAf","sourcesContent":["import React from 'react';\r\nimport classnames from 'classnames';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport * as styles from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport './styles/codeBlock.less';\r\nclass CodeBlock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      codeStr:  ''\r\n    };\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    const { code } = this.props;\r\n    if (code !== nextProps.code) {\r\n      this.setState({ code: nextProps.code });\r\n    }\r\n  }\r\n  onChange = (e) => {\r\n    const { callback } = this.props;\r\n    this.setState({\r\n      codeStr: e.target.value\r\n    }, () => callback(this.state.codeStr));\r\n  }\r\n\r\n  render() {\r\n    const { codeStr } = this.state;\r\n    const { code, className, editer, language='jsx', style='', showLineNumbers=false } = this.props;\r\n    const cls = classnames('precodebox', className);\r\n    const codeStyle = styles[style] || styles.defaultStyle; // ['agate', 'ascetic', 'brownPaper']\r\n    const lineNumberStyle = showLineNumbers ? { paddingLeft: 37 } : {};\r\n    const textareaStyle = Object.assign({}, codeStyle.hljs, lineNumberStyle)\r\n    const value = codeStr || code;\r\n    for (let key in codeStyle) {\r\n      const obj = codeStyle[key];\r\n      if (obj.fontWeight === 'bold') {\r\n        obj.fontWeight = 400;\r\n      }\r\n    }\r\n    return (\r\n      <div className={cls}>\r\n        {\r\n          editer && <textarea\r\n            value={value}\r\n            className=\"invisible\"\r\n            style={textareaStyle}\r\n            onChange={e => this.onChange(e)}\r\n          />\r\n        }\r\n        <SyntaxHighlighter\r\n          language={language}\r\n          style={codeStyle}\r\n          customStyle={{fontWight: 'normal'}}\r\n          showLineNumbers={showLineNumbers}\r\n        >\r\n          {value}\r\n        </SyntaxHighlighter>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CodeBlock;\r\n"],"file":"CodeBlock.js"}